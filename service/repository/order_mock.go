// Code generated by MockGen. DO NOT EDIT.
// Source: service/repository/order.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kitchen-delivery/entity"
	go_uuid "github.com/satori/go.uuid"
)

// MockOrderRepository is a mock of OrderRepository interface
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method
func (m *MockOrderRepository) CreateOrder(order entity.Order) error {
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(order interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), order)
}

// GetOrder mocks base method
func (m *MockOrderRepository) GetOrder(orderUUID go_uuid.UUID) (*entity.Order, error) {
	ret := m.ctrl.Call(m, "GetOrder", orderUUID)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder
func (mr *MockOrderRepositoryMockRecorder) GetOrder(orderUUID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderRepository)(nil).GetOrder), orderUUID)
}
