// Code generated by MockGen. DO NOT EDIT.
// Source: service/repository/shelf_order.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kitchen-delivery/entity"
)

// MockShelfOrderRepository is a mock of ShelfOrderRepository interface
type MockShelfOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShelfOrderRepositoryMockRecorder
}

// MockShelfOrderRepositoryMockRecorder is the mock recorder for MockShelfOrderRepository
type MockShelfOrderRepositoryMockRecorder struct {
	mock *MockShelfOrderRepository
}

// NewMockShelfOrderRepository creates a new mock instance
func NewMockShelfOrderRepository(ctrl *gomock.Controller) *MockShelfOrderRepository {
	mock := &MockShelfOrderRepository{ctrl: ctrl}
	mock.recorder = &MockShelfOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShelfOrderRepository) EXPECT() *MockShelfOrderRepositoryMockRecorder {
	return m.recorder
}

// AddOrderToShelf mocks base method
func (m *MockShelfOrderRepository) AddOrderToShelf(shelfOrder entity.ShelfOrder) error {
	ret := m.ctrl.Call(m, "AddOrderToShelf", shelfOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrderToShelf indicates an expected call of AddOrderToShelf
func (mr *MockShelfOrderRepositoryMockRecorder) AddOrderToShelf(shelfOrder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderToShelf", reflect.TypeOf((*MockShelfOrderRepository)(nil).AddOrderToShelf), shelfOrder)
}

// CountOrdersOnShelf mocks base method
func (m *MockShelfOrderRepository) CountOrdersOnShelf(shelfType entity.ShelfType) (int, error) {
	ret := m.ctrl.Call(m, "CountOrdersOnShelf", shelfType)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOrdersOnShelf indicates an expected call of CountOrdersOnShelf
func (mr *MockShelfOrderRepositoryMockRecorder) CountOrdersOnShelf(shelfType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOrdersOnShelf", reflect.TypeOf((*MockShelfOrderRepository)(nil).CountOrdersOnShelf), shelfType)
}

// UpdateOrderStatus mocks base method
func (m *MockShelfOrderRepository) UpdateOrderStatus(shelfOrder entity.ShelfOrder, orderStatus entity.OrderStatus) error {
	ret := m.ctrl.Call(m, "UpdateOrderStatus", shelfOrder, orderStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus
func (mr *MockShelfOrderRepositoryMockRecorder) UpdateOrderStatus(shelfOrder, orderStatus interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockShelfOrderRepository)(nil).UpdateOrderStatus), shelfOrder, orderStatus)
}

// GetOpenOrder mocks base method
func (m *MockShelfOrderRepository) GetOpenOrder() (*entity.ShelfOrder, error) {
	ret := m.ctrl.Call(m, "GetOpenOrder")
	ret0, _ := ret[0].(*entity.ShelfOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenOrder indicates an expected call of GetOpenOrder
func (mr *MockShelfOrderRepositoryMockRecorder) GetOpenOrder() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenOrder", reflect.TypeOf((*MockShelfOrderRepository)(nil).GetOpenOrder))
}

// GetExpiredOrders mocks base method
func (m *MockShelfOrderRepository) GetExpiredOrders() ([]*entity.ShelfOrder, error) {
	ret := m.ctrl.Call(m, "GetExpiredOrders")
	ret0, _ := ret[0].([]*entity.ShelfOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredOrders indicates an expected call of GetExpiredOrders
func (mr *MockShelfOrderRepositoryMockRecorder) GetExpiredOrders() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredOrders", reflect.TypeOf((*MockShelfOrderRepository)(nil).GetExpiredOrders))
}
